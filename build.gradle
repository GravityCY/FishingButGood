plugins {
    id "fabric-loom" version "1.7-SNAPSHOT"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.1.24"
    id "me.gravityio.replacementplugin" version "0.0.7" // my local experimental plugin, just delete if you fork
}

version = "${rootProject.mod_version}+${project.name}"
group = "me.gravityio"

def javaVersionNum = project.java_version.toInteger()
def javaVersion = JavaVersion.toVersion(javaVersionNum)
def mcVersions = project.minecraft_versions.split(" ").toList()

base {
    archivesName = rootProject.mod_id
}

loom {
    runConfigs.all {
        ideConfigGenerated(true)
        runDir = "../../run"
    }
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" } // ModMenu
    // YACL
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" } // YACL DEP
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

// To separate default stuff with actual dependencies
project.dependencies.add("minecraft", "com.mojang:minecraft:${project.name}")
project.dependencies.add("mappings", loom.layered {
    officialMojangMappings()
    parchment("org.parchmentmc.data:${project.parchment_version}@zip")
})
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${rootProject.loader_version}")
project.dependencies.add("modImplementation", "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

dependencies {
    if (project.name == "1.20") {
        modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
    } else {
        modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric")
    }
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
}

replacement {
    fileName = "README.md"
    types = ["modrinth", "curseforge"]
    values = [
            "fabric": ["https://modrinth.com/mod/fabric-api", "https://curseforge.com/minecraft/mc-mods/fabric-api"],
            "yacl": ["https://modrinth.com/mod/yacl", "https://curseforge.com/minecraft/mc-mods/yacl"],
            "modmenu": ["https://modrinth.com/mod/modmenu", "https://curseforge.com/minecraft/mc-mods/modmenu"]
    ]
}

tasks.register("publishMod") {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD")

    def mainFile = upload(rootProject.curseforge_id, remapJar)
    mainFile.changelog = rootProject.changelog
    mcVersions.each {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = "${rootProject.mod_name} ${project.version}"
    mainFile.addEnvironment("Client", "Server")
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java ${javaVersionNum}")
    mainFile.addRequirement("fabric-api")
    mainFile.addRequirement("yacl")
    mainFile.addOptional("modmenu")

    doLast {
        rootProject.ext.data.get(stonecutter.current.project).curseFileId = mainFile.curseFileId
    }
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = rootProject.modrinth_id
    versionName = "${rootProject.mod_name} ${project.version}"
    versionNumber = project.version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = rootProject.changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

tasks.named("modrinth").configure {
    doLast {
        rootProject.ext.data.get(stonecutter.current.project).modrinthFileId = it.uploadInfo.id
    }
}

processResources  {
    def range = ""
    mcVersions.eachWithIndex{ String str, int i ->
        range += "\"$str\""
        if (i != mcVersions.size() - 1)
            range += ","
    }

    def modProperties = [
            "mod_id": rootProject.mod_id,
            "mod_name": rootProject.mod_name,
            "mod_version": rootProject.mod_version,
            "mod_description": rootProject.mod_description,
            "mod_author": rootProject.mod_author,
            "mod_sources": rootProject.mod_sources,
            "mod_license": rootProject.mod_license,
            "loader_version": rootProject.loader_version,
            "minecraft_version": range,
            "fabric_api_version": project.fabric_version,
            "yacl_version": project.yacl_version,
            "modmenu_version": project.modmenu_version,
            "java_version": project.java_version
    ]

    def mixinProperties = [
            "java_version": project.java_version
    ]

    inputs.properties(modProperties)
    inputs.properties(mixinProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }

    filesMatching("multiline_mastery.mixins.json") {
        expand mixinProperties
    }

    if (project.name == "1.21") {
        doLast {
            copy {
                from("$buildDir/resources/main/data_1.21")
                into("$buildDir/resources/main/data")
                include "**/*"
            }

            delete "$buildDir/resources/main/data_1.21"
        }
    } else {
        exclude("data_1.21/**")
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = javaVersionNum
}

java {
    withSourcesJar()

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}