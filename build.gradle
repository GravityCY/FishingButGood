
plugins {
    id "fabric-loom" version "1.6-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
    id 'net.darkhax.curseforgegradle' version "1.1.24"
}

version = project.mod_version
group = "me.gravityio"

def dependencyURLS = [
        modrinth: [
                yacl: "https://modrinth.com/mod/yacl",
                fabric: "https://modrinth.com/mod/fabric-api",
                modmenu: "https://modrinth.com/mod/modmenu"
        ],
        curseforge: [
                yacl: "https://www.curseforge.com/minecraft/mc-mods/yacl",
                fabric: "https://www.curseforge.com/minecraft/mc-mods/fabric-api",
                modmenu: "https://www.curseforge.com/minecraft/mc-mods/modmenu"
        ]
]

def changelog = "+ Release!"
def mcVersions = ["1.20", "1.20.1", "1.20.2", "1.20.3", "1.20.4"]

def replace(String input, String name, Map<String, Map<String, String>> names, String fileName) {
    def cf = file("${fileName}.md")

    def replaced = input
    names[name].each {
        replaced = replaced.replace('${'+it.key+'}', it.value)
    }
    cf.write(replaced, "UTF-8")
}

def replace(String input, String name, Map names) {
    replace(input, name, names, name.toUpperCase())
}

tasks.register("readme") {
    group = "documentation"

    def input = file("README-TEMPLATE.md")
    def inputText = input.getText("UTF-8")
    replace(inputText, "curseforge", dependencyURLS, "readmes/CURSEFORGE")
    replace(inputText, "modrinth", dependencyURLS, "readmes/MODRINTH")
    replace(inputText, "modrinth", dependencyURLS, "README")
}

tasks.register("publishMod") {
    group = "publishing"

    dependsOn "publishCurseForge"
    dependsOn "modrinth"
}

tasks.register('publishCurseForge', net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    disableVersionDetection()

    group = "publishing"
    apiToken = System.getenv("CURSEFORGE_UPLOAD")

    def mainFile = upload(1027692, remapJar)
    mainFile.changelog = changelog
    mcVersions.each {
        mainFile.addGameVersion(it)
    }
    mainFile.displayName = "${mod_name} ${mod_version}"
    mainFile.addModLoader("Fabric")
    mainFile.releaseType = "release"
    mainFile.addJavaVersion("Java 17")
    mainFile.addRequirement("fabric-api")
    mainFile.addRequirement("yacl")
    mainFile.addOptional("modmenu")
}

modrinth {
    token = System.getenv("MODRINTH_UPLOAD")
    projectId = "multiline-mastery"
    versionName = "${mod_name} ${mod_version}"
    versionNumber = mod_version
    uploadFile = remapJar
    gameVersions = mcVersions
    loaders = ["fabric"]
    delegate.changelog = changelog
    dependencies {
        required.project "fabric-api"
        required.project "yacl"
        optional.project "modmenu"
    }
}

repositories {
    maven { url "https://jitpack.io" } // Mixin Extras
    maven { url "https://maven.terraformersmc.com/releases/" } // ModMenu
    // YACL
    maven {
        name 'Xander Maven'
        url 'https://maven.isxander.dev/releases'
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" } // YACL DEP
}

// To separate default stuff with actual dependencies
project.dependencies.add("minecraft", "com.mojang:minecraft:${project.minecraft_version}")
project.dependencies.add("mappings", "net.fabricmc:yarn:${project.project.yarn_version}:v2")
project.dependencies.add("modImplementation", "net.fabricmc:fabric-loader:${project.loader_version}")
project.dependencies.add("modImplementation", "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

dependencies {
    modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    include("com.github.LlamaLad7:MixinExtras:0.1.1")
}

base {
    archivesName = project.mod_id
}

processResources  {
    def modProperties = [
            "mod_id": project.mod_id,
            "mod_name": project.mod_name,
            "mod_version": project.mod_version,
            "mod_description": project.mod_description,
            "mod_author": project.mod_author,
            "mod_sources": project.mod_sources,
            "mod_license": project.mod_license,
            "loader_version": project.loader_version,
            "minecraft_version": project.minecraft_version
    ]

    inputs.properties(modProperties)

    filesMatching("fabric.mod.json") {
        expand modProperties
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {}
}